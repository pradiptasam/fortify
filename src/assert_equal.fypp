#:def assert_equal(type, suffix)
  subroutine assert_equal_${suffix}$(expected, actual, test_name, num_failures)
    ${type}$, intent(in) :: expected, actual
    character(len=*), intent(in) :: test_name
    integer, intent(inout) :: num_failures

    #:if suffix == "logical"
    if (expected .neqv. actual) then
    #:else
    if (expected /= actual) then
    #:endif
        print *, "FAIL: ", test_name, " - Expected: ", expected, " but got: ", actual
        num_failures = num_failures + 1
    else
        print *, "PASS: ", test_name
    end if
  end subroutine assert_equal_${suffix}$

#:enddef

#:def assert_not_equal(type, suffix)
  subroutine assert_not_equal_${suffix}$(expected, actual, test_name, num_failures)
    ${type}$, intent(in) :: expected, actual
    character(len=*), intent(in) :: test_name
    integer, intent(inout) :: num_failures

    #:if suffix == "logical"
    if (expected .neqv. actual) then
    #:else
    if (expected /= actual) then
    #:endif
        print *, "PASS: ", test_name
    else
        print *, "FAIL: ", test_name, " - Expected: ", expected, " but got: ", actual
        num_failures = num_failures + 1
    end if
  end subroutine assert_not_equal_${suffix}$

#:enddef

#:def assert_less_than(type, suffix)
  subroutine assert_less_than_${suffix}$(val1, val2, test_name, num_failures)
    ${type}$, intent(in) :: val1, val2
    character(len=*), intent(in) :: test_name
    integer, intent(inout) :: num_failures

    if (val1 < val2) then
        print *, "PASS: ", test_name
    else
        print *, "FAIL: ", test_name, " - Expected less than ", val2, " but got: ", val1
        num_failures = num_failures + 1
    end if
  end subroutine assert_less_than_${suffix}$

#:enddef

#:def assert_greater_than(type, suffix)
  subroutine assert_greater_than_${suffix}$(val1, val2, test_name, num_failures)
    ${type}$, intent(in) :: val1, val2
    character(len=*), intent(in) :: test_name
    integer, intent(inout) :: num_failures

    if (val1 > val2) then
        print *, "PASS: ", test_name
    else
        print *, "FAIL: ", test_name, " - Expected greater than ", val2, " but got: ", val1
        num_failures = num_failures + 1
    end if
  end subroutine assert_greater_than_${suffix}$

#:enddef

#:def assert_less_than_equal(type, suffix)
  subroutine assert_less_than_equal_${suffix}$(val1, val2, test_name, num_failures)
    ${type}$, intent(in) :: val1, val2
    character(len=*), intent(in) :: test_name
    integer, intent(inout) :: num_failures

    if (val1 <= val2) then
        print *, "PASS: ", test_name
    else
        print *, "FAIL: ", test_name, " - Expected less than equal", val2, " but got: ", val1
        num_failures = num_failures + 1
    end if
  end subroutine assert_less_than_equal_${suffix}$

#:enddef

#:def assert_greater_than_equal(type, suffix)
  subroutine assert_greater_than_equal_${suffix}$(val1, val2, test_name, num_failures)
    ${type}$, intent(in) :: val1, val2
    character(len=*), intent(in) :: test_name
    integer, intent(inout) :: num_failures

    if (val1 >= val2) then
        print *, "PASS: ", test_name
    else
        print *, "FAIL: ", test_name, " - Expected greater than equal", val2, " but got: ", val1
        num_failures = num_failures + 1
    end if
  end subroutine assert_greater_than_equal_${suffix}$

#:enddef

module check_assertions

  USE, INTRINSIC :: ISO_FORTRAN_ENV, ONLY: sp => real32, &
    &                                      dp => real64

  implicit none

  ! Define the generic interface for assert_equal
  interface assert_equal
    #:for suffix in ["integer", "real_sp", "real_dp", "logical", "character_len_star"]
    module procedure assert_equal_${suffix}$
    #:endfor
  end interface

  interface assert_not_equal
    #:for suffix in ["integer", "real_sp", "real_dp", "logical", "character_len_star"]
    module procedure assert_not_equal_${suffix}$
    #:endfor
  end interface

  interface assert_less_than
    #:for suffix in ["integer", "real_sp", "real_dp"]
    module procedure assert_less_than_${suffix}$
    #:endfor
  end interface

  interface assert_greater_than
    #:for suffix in ["integer", "real_sp", "real_dp"]
    module procedure assert_greater_than_${suffix}$
    #:endfor
  end interface

  interface assert_less_than_equal
    #:for suffix in ["integer", "real_sp", "real_dp"]
    module procedure assert_less_than_equal_${suffix}$
    #:endfor
  end interface

  interface assert_greater_than_equal
    #:for suffix in ["integer", "real_sp", "real_dp"]
    module procedure assert_greater_than_equal_${suffix}$
    #:endfor
  end interface

contains

    ! Generate assert_equal subroutines for different types
    #:for t, suffix in [["integer", "integer"], ["real(dp)", "real_dp"], ["real(sp)", "real_sp"], ["logical", "logical"], ["character(len=*)", "character_len_star"]]
    #:call assert_equal(t, suffix)
    #:endcall
    #:endfor

    #:for t, suffix in [["integer", "integer"], ["real(dp)", "real_dp"], ["real(sp)", "real_sp"], ["logical", "logical"], ["character(len=*)", "character_len_star"]]
    #:call assert_not_equal(t, suffix)
    #:endcall
    #:endfor

    #:for t, suffix in [["integer", "integer"], ["real(dp)", "real_dp"], ["real(sp)", "real_sp"]]
    #:call assert_less_than(t, suffix)
    #:endcall
    #:endfor

    #:for t, suffix in [["integer", "integer"], ["real(dp)", "real_dp"], ["real(sp)", "real_sp"]]
    #:call assert_greater_than(t, suffix)
    #:endcall
    #:endfor

    #:for t, suffix in [["integer", "integer"], ["real(dp)", "real_dp"], ["real(sp)", "real_sp"]]
    #:call assert_less_than_equal(t, suffix)
    #:endcall
    #:endfor

    #:for t, suffix in [["integer", "integer"], ["real(dp)", "real_dp"], ["real(sp)", "real_sp"]]
    #:call assert_greater_than_equal(t, suffix)
    #:endcall
    #:endfor

    subroutine assert_true(condition, test_name, num_failures)
        logical, intent(in) :: condition
        character(len=*), intent(in) :: test_name
        integer, intent(inout) :: num_failures

        if (.not. condition) then
            print *, "FAIL:", test_name, "- Expected true but got false"
            num_failures = num_failures + 1
        else
            print *, "PASS:", test_name
        end if
    end subroutine assert_true

    subroutine assert_false(condition, test_name, num_failures)
        logical, intent(in) :: condition
        character(len=*), intent(in) :: test_name
        integer, intent(inout) :: num_failures

        if (condition) then
            print *, "FAIL:", test_name, "- Expected false but got true"
            num_failures = num_failures + 1
        else
            print *, "PASS:", test_name
        end if
    end subroutine assert_false

end module check_assertions
