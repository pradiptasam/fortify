#:def assert_equal(type, suffix)

  subroutine assert_equal_${suffix}$(expected, actual, test_name)
      ${type}$, intent(in) :: expected, actual
      character(len=*), intent(in) :: test_name

      #:if suffix == "logical"
      if (expected .neqv. actual) then
      #:else
      if (expected /= actual) then
      #:endif
          print *, "FAIL: ", test_name, " - Expected: ", expected, " but got: ", actual
      else
          print *, "PASS: ", test_name
      end if
  end subroutine assert_equal_${suffix}$
#:enddef

module test_assertions
    implicit none

    ! Define the generic interface for assert_equal
    interface assert_equal
        #:for suffix in ["integer", "real", "logical", "character_len_star"]
        module procedure assert_equal_${suffix}$
        #:endfor
    end interface

contains

    ! Generate assert_equal subroutines for different types
    #:for t, suffix in [["integer", "integer"], ["real", "real"], ["logical", "logical"], ["character(len=*)", "character_len_star"]]
    #:call assert_equal(t, suffix)
    #:endcall
    #:endfor

end module test_assertions
